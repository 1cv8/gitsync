

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("u storage-user", "", "пользователь хранилища конфигурации").ТСтрока().ВОкружении("GITSYNC_STORAGE_USER").ПоУмолчанию("Администратор");
	Команда.Опция("p storage-pwd", "", "пароль пользователя хранилища конфигурации").ТСтрока().ВОкружении("GITSYNC_STORAGE_PASSWORD GITSYNC_STORAGE_PWD");

	Команда.Аргумент("PATH", "", "Путь к хранилищу конфигурации 1С.").ТСтрока().ВОкружении("GITSYNC_STORAGE_PATH");
	Команда.Аргумент("WORKDIR", "", "Адрес локального репозитория GIT или каталог исходников внутри локальной копии git-репозитария. По умолчанию текущий каталог")
				.ВОкружении("GITSYNC_WORKDIR")
				.Обязательный(Ложь)
				.ПоУмолчанию(ТекущийКаталог());;
	
	Команда.УстановитьДействиеПередВыполнением(ПараметрыПриложения);
	Команда.УстановитьДействиеПослеВыполнения(ПараметрыПриложения);

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	ОбщиеПараметры = ПараметрыПриложения.Параметры();
	МенеджерПлагинов = ОбщиеПараметры.МенеджерПлагинов;
	Лог = ПараметрыПриложения.Лог();

	ПутьКХранилищу			= Команда.ЗначениеАргумента("PATH");
	КаталогРабочейКопии		= Команда.ЗначениеАргумента("WORKDIR");
	ПользовательХранилища		= Команда.ЗначениеОпции("--storage-user");
	ПарольПользователяХранилища	= Команда.ЗначениеОпции("--storage-pwd");

	// инициализировать с нуля
	ФайлКаталогРабочейКопии = Новый Файл(КаталогРабочейКопии);
	Если Не ФайлКаталогРабочейКопии.Существует() Тогда
		СоздатьКаталог(КаталогРабочейКопии);
	КонецЕсли;

	ЭтоКаталогГит = ПроверитьНаличиеРепозитарияГит(КаталогРабочейКопии);
	Если Не ЭтоКаталогГит Тогда
		
		ИнициализироватьРепозитарий(КаталогРабочейКопии);
		
	КонецЕсли;

	МассивФайлов = НайтиФайлы(КаталогРабочейКопии, "src");
	КаталогИсходников = КаталогРабочейКопии;
	Если МассивФайлов.Количество() > 0  Тогда
		КаталогИсходников = МассивФайлов[0].ПолноеИмя;
	КонецЕсли;

	Распаковщик = Новый МенеджерСинхронизации(ПараметрыПриложения, МенеджерПлагинов);
	Распаковщик.ВерсияПлатформы = ОбщиеПараметры.ВерсияПлатформы;
	Распаковщик.УстановитьАвторизациюВХранилищеКонфигурации(ПользовательХранилища, ПарольПользователяХранилища);
	Распаковщик.НаполнитьКаталогРабочейКопииСлужебнымиДанными(КаталогИсходников, ПутьКХранилищу);
	
	Лог.Информация("Инициализация завершена");
	
КонецПроцедуры // ВыполнитьКоманду


// Выполняет инициализацию репо
//
Процедура ИнициализироватьРепозитарий(Знач КаталогЛокальнойКопии) 

	ГитРепозиторий = Новый ГитРепозиторий;
	ГитРепозиторий.УстановитьРабочийКаталог(КаталогЛокальнойКопии);
	ГитРепозиторий.Инициализировать();
	
КонецПроцедуры

// Возвращает Истина, если каталог является каталогом или подкаталогом гит-репозитория, иначе возвращается Ложь.
//
Функция ПроверитьНаличиеРепозитарияГит(Знач КаталогЛокальнойКопии) 
	
	ГитРепозиторий = Новый ГитРепозиторий;
	ГитРепозиторий.УстановитьРабочийКаталог(КаталогЛокальнойКопии);
	ГитРепозиторий.УстановитьТихийРежимРаботы();

	ТекстСтатуса = ГитРепозиторий.Статус();
	КодВозврата = ГитРепозиторий.ПолучитьКодВозврата();

	Возврат КодВозврата = 0;

КонецФункции // ПроверитьНаличиеРепозитарияГит(Знач Каталог) Экспорт


Функция ИмяФункции()Экспорт
	
КонецФункции

