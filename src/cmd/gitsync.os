///////////////////////////////////////////////////////////////////
//
// Выполняет синхронизацию хранилища 1С с Git 
//
// Структура модуля реализована в соответствии с рекомендациями 
// oscript-app-template (C) EvilBeaver
//
///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#Использовать "."
#Использовать "../core"
#Использовать logos
#Использовать "../../../cli"

Перем Лог;
Перем Плагины;
Перем ВерсияПлатформы;
Перем ВыводДополнительнойИнформации;
Перем ВременныйКаталогРаботы;
Перем ДоменПочты;
///////////////////////////////////////////////////////////////////////////////

Процедура ВыполнитьПриложение()
	
	Приложение = Новый КонсольноеПриложение(ПараметрыПриложения.ИмяПриложения(), "Приложение для синхронизации Хранилища 1С с git");
	Приложение.Версия("version", ПараметрыПриложения.Версия());

	ВерсияПлатформы = Приложение.Опция("v8version", "8.3", "<Маска версии платформы (8.3, 8.3.5, 8.3.6.2299 и т.п.)>").ВОкружении("GITSYNC_V8VERSION");
	ВыводДополнительнойИнформации = Приложение.Опция("v verbose", Ложь, "Вывод дополнительной информация о выполнении").Флаговый().ВОкружении("GITSYNC_VERSOBE");
	Плагины = Приложение.Опция("p plugins", "", "Плагины к загрузке и исполнению").ТМассивСтрок();	
	ВременныйКаталогРаботы = Приложение.Опция("t tempdir", "", "<Путь к каталогу временных файлов>");
	ДоменПочты= Приложение.Опция("e email", "localhost", "<домен почты для пользователей git>");
	
	Приложение.ДобавитьКоманду("init i", "Инициализация структуры нового хранилища git. Подготовка к синхронизации", Новый КомандаInit);
	Приложение.ДобавитьКоманду("sync s", "Выполняет синхронизацию хранилища 1С с git-репозиторием", Новый КомандаSync);
	Приложение.ДобавитьКоманду("clone c", "Клонирует существующий репозиторий и создает служебные файлы", Новый КомандаClone);
	//Приложение.ДобавитьКоманду("all a", "Запускает синхронизацию по нескольким репозиториям", Новый КомандаAll);
	Приложение.ДобавитьКоманду("set-version v", "Устанавливает необходимую версию в файл VERSION", Новый КомандаSetVersion);
	Приложение.ДобавитьКоманду("plugins p", "Управление плагинами gitsync", Новый КомандаPlugins);
	
	ПараметрыПриложения.ПодготовитьПлагины(Приложение);

	Приложение.УстановитьДействиеПередВыполнением(ЭтотОбъект);

	Приложение.Запустить(АргументыКоманднойСтроки);
	
КонецПроцедуры // ВыполнениеКоманды()

Процедура ПередВыполнениемКоманды(Знач Команда) Экспорт

	Команда.ПередВыполнениемКоманды(Команда);

	Лог.Отладка("Устанавливаю общие параметры");
	ПараметрыПриложения.УстановитьВерсиюПлатформы(ВерсияПлатформы.Значение);
	ПараметрыПриложения.УстановитьРежимВыводаДополнительнойИнформации(ВыводДополнительнойИнформации.Значение);
	ПараметрыПриложения.УстановитьПлагины(Плагины.Значение);
	ПараметрыПриложения.УстановитьДоменПочты(ДоменПочты.Значение);
	
	ПараметрыПриложения.УстановитьВременныйКаталог(ВременныйКаталогРаботы.Значение);

КонецПроцедуры

Процедура ИмяПроцедуры() Экспорт
	
КонецПроцедуры

///////////////////////////////////////////////////////

Лог = ПараметрыПриложения.Лог();

Попытка
	
	ВыполнитьПриложение();
	
Исключение
	
	Лог.КритичнаяОшибка(ОписаниеОшибки());
	ЗавершитьРаботу(ПараметрыПриложения.РезультатыКоманд().ОшибкаВремениВыполнения);
	
КонецПопытки;