
#Использовать logos
#Использовать gitrunner

Перем ВерсияПлагина;
Перем Лог;
Перем КомандыПлагина;

Перем Обработчик;

Перем URLРепозитория;
Перем ИмяВетки;
Перем ПолучитьИзменения;
Перем ОтправитьИзменения;

Перем КоличествоКоммитовДоPush;
Перем СчетчикКоммитов;
Перем ОтправлятьТеги;

Перем ГитРепозиторий;

Функция ОписаниеПлагина() Экспорт

	Возврат Новый Структура("Версия, Лог, ИмяПакета", ВерсияПлагина, Лог, ИмяПлагина());

КонецФункции // Информация() Экспорт

Процедура ПриАктивизацииПлагина(СтандартныйОбработчик) Экспорт

	Обработчик = СтандартныйОбработчик;

	URLРепозитория = "";
	ИмяВетки = "";
	ПолучитьИзменения = Ложь;
	ОтправитьИзменения = Ложь;
	ОтправлятьТеги = Ложь;

	КоличествоКоммитовДоPush = 0;
	СчетчикКоммитов = 0;

КонецПроцедуры

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации, Парсер) Экспорт

	Лог.Отладка("Ищю команду <%1> в списке поддерживаемых", ИмяКоманды);
	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Устанавливаю дополнительные параметры для команды %1", ИмяКоманды);
	
	//КлассРеализации.Опция("b branch", "master", "<имя ветки git>").ВОкружении("GITSYNC_BRANCH");
	КлассРеализации.Опция("P push", Ложь, "[*sync-remote] Флаг отправки изменений на удаленный репозиторий").Флаг().ВОкружении("GITSYNC_PUSH");
	КлассРеализации.Опция("G pull", Ложь, "[*sync-remote] Флаг получения изменений из удаленный репозитория перед синхронизацией").Флаг().ВОкружении("GITSYNC_PULL");
	КлассРеализации.Опция("T push-tags", Ложь, "[*sync-remote] Флаг отправки тегов по версиям").Флаг().ВОкружении("GITSYNC_PUSH_TAGS");
	КлассРеализации.Опция("n push-n-commits", 0, "[*sync-remote] <число> количество коммитов до промежуточной отправки на удаленный сервер").ТЧисло().ВОкружении("GITSYNC_PUSH_N_COMMITS");
	
	КлассРеализации.Аргумент("URL", "", "[*sync-remote] Адрес удаленного репозитория GIT.").ВОкружении("GITSYNC_REPO_URL").Обязательный(Ложь);

КонецПроцедуры

Процедура ПриПолученииПараметров(ПараметрыКоманды, ДополнительныеПараметры) Экспорт

	URLРепозитория = ПараметрыКоманды["URL"];
	ИмяВетки = ПараметрыКоманды["--branch"];

	ПолучитьИзменения = ПараметрыКоманды["--pull"];
	ОтправитьИзменения = ПараметрыКоманды["--push"];
	ОтправлятьТеги = ПараметрыКоманды["--push-tags"];

	КоличествоКоммитовДоPush = ПараметрыКоманды["--push-n-commits"];

	Если URLРепозитория = Неопределено Тогда
		URLРепозитория = "";
	КонецЕсли;

	Если ИмяВетки = Неопределено Тогда
		ИмяВетки = "";
	КонецЕсли;

	Если КоличествоКоммитовДоPush = Неопределено Тогда
		КоличествоКоммитовДоPush = 0;
	КонецЕсли;

	Если ОтправлятьТеги = Неопределено Тогда
		ОтправлятьТеги = Ложь;
	КонецЕсли;

	Если ПолучитьИзменения = Неопределено Тогда
		ПолучитьИзменения = Ложь;
	КонецЕсли;

	Если ОтправитьИзменения = Неопределено Тогда
		ОтправитьИзменения = Ложь;
	КонецЕсли;

	КоличествоКоммитовДоPush = Число(КоличествоКоммитовДоPush);
	Лог.Отладка("Установлена отправка изменений <%1> ", ОтправитьИзменения);
	Лог.Отладка("Установлена получение изменений <%1> ", ОтправитьИзменения);
	Лог.Отладка("Установлено количество коммитов <%1> после, которых осущевствляется отправка", КоличествоКоммитовДоPush);
	Лог.Отладка("Установлен флаг оправки меток в значение <%1> выгрузки версий", ОтправлятьТеги);

КонецПроцедуры

Процедура ПередНачаломВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки) Экспорт

	Если Не ПолучитьИзменения Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Получение изменений с удаленного узла (pull)");

	ГитРепозиторий = ПолучитьГитРепозиторий(КаталогРабочейКопии);
	ГитРепозиторий.Получить(URLРепозитория, ИмяВетки);

КонецПроцедуры

Процедура ПослеОкончанияВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки) Экспорт

	Если СчетчикКоммитов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГитРепозиторий = ПолучитьГитРепозиторий(КаталогРабочейКопии);
	ВыполнитьGitPush(ГитРепозиторий, КаталогРабочейКопии);

КонецПроцедуры


Процедура ПослеКоммита(ГитРепозиторий, КаталогРабочейКопии) Экспорт

	СчетчикКоммитов = СчетчикКоммитов + 1;

	Если СчетчикКоммитов = КоличествоКоммитовДоPush Тогда

		ВыполнитьGitPush(ГитРепозиторий, КаталогРабочейКопии);
		СчетчикКоммитов = 0;

	КонецЕсли;

КонецПроцедуры


// Cтандартная процедура git push
//
Процедура ВыполнитьGitPush(Знач ГитРепозиторий, Знач ЛокальныйРепозиторий) Экспорт

	Если Не ОтправитьИзменения Тогда
		Возврат;
	КонецЕсли;

	Лог.Информация("Отправляю изменения на удаленный url (push)");

	ГитРепозиторий.ВыполнитьКоманду(СтрРазделить("gc --auto", " "));
	Лог.Отладка(СтрШаблон("Вывод команды gc: %1", СокрЛП(ГитРепозиторий.ПолучитьВыводКоманды())));

	ПараметрыКомандыPush = Новый Массив;
	ПараметрыКомандыPush.Добавить("push -u");
	ПараметрыКомандыPush.Добавить(СтрЗаменить(URLРепозитория, "%", "%%"));
	ПараметрыКомандыPush.Добавить("--all -v");

	ГитРепозиторий.ВыполнитьКоманду(ПараметрыКомандыPush);

	Если ОтправлятьТеги Тогда

		ПараметрыКомандыPush = Новый Массив;
		ПараметрыКомандыPush.Добавить("push -u");
		ПараметрыКомандыPush.Добавить(СтрЗаменить(URLРепозитория, "%", "%%"));
		ПараметрыКомандыPush.Добавить("--tags");

		ГитРепозиторий.ВыполнитьКоманду(ПараметрыКомандыPush);

	КонецЕсли;

	Лог.Отладка(СтрШаблон("Вывод команды Push: %1", СокрЛП(ГитРепозиторий.ПолучитьВыводКоманды())));

КонецПроцедуры

Функция ПолучитьГитРепозиторий(Знач КаталогРабочейКопии)
	
	Если Не ГитРепозиторий = Неопределено Тогда
		Возврат ГитРепозиторий;
	КонецЕсли;

	ГитРепозиторий = Новый ГитРепозиторий();
	ГитРепозиторий.УстановитьРабочийКаталог(КаталогРабочейКопии);

	Возврат ГитРепозиторий;

КонецФункции // ПолучитьГитРепозиторий()

Функция ИмяПлагина()
	возврат "sync-remote";
КонецФункции // ИмяПлагина()

Процедура Инициализация()

	ВерсияПлагина = "1.0.0";
	Лог = Логирование.ПолучитьЛог("oscript.app.gitsync_plugins_"+ СтрЗаменить(ИмяПлагина(),"-", "_"));
	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");

	URLРепозитория = "";
	ИмяВетки = "";
	ПолучитьИзменения = Ложь;
	ОтправитьИзменения = Ложь;
	ОтправлятьТеги = Ложь;

	КоличествоКоммитовДоPush = 0;
	СчетчикКоммитов = 0;

КонецПроцедуры

Инициализация();
