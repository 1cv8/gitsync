
#Использовать logos
#Использовать gitrunner

Перем ВерсияПлагина;
Перем Лог;
Перем КомандыПлагина;

Перем Обработчик;

Перем URLРепозитория;
Перем ИмяВетки;

Перем ГитРепозиторийСохр;
Перем РабочийКаталогСохр;

Функция Информация() Экспорт
	
	Возврат Новый Структура("Версия, Лог", ВерсияПлагина, Лог)
	
КонецФункции // Информация() Экспорт

Процедура ПриАктивизацииПлагина(СтандартныйОбработчик, КонтекстПлагина) Экспорт
	
	Обработчик = СтандартныйОбработчик;

КонецПроцедуры

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации, Парсер, КонтекстПлагина) Экспорт

	Лог.Отладка("Ищю команду <%1> в списке поддерживаемых", ИмяКоманды);
	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Устанавливаю дополнительные параметры для команды %1", ИмяКоманды);
	
	//ОписаниеКоманды = Парсер.ПолучитьКоманду(ИмяКоманды);
	//Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-push-every-n-commits", "[PLUGIN] [push] <число> количество коммитов до промежуточной отправки на удаленный сервер");
	//Парсер.ДобавитьПараметрФлагКоманды		 (ОписаниеКоманды, "-push-tags", "[PLUGIN] [push] Флаг отправки установленных меток");

	//арсер.ДобавитьКоманду(ОписаниеКоманды);

КонецПроцедуры

Процедура ПриВыполненииКоманды(ПараметрыКоманды, ДополнительныеПараметры, КонтекстПлагина) Экспорт

КонецПроцедуры


Процедура ПередНачаломВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки, КонтекстПлагина) Экспорт

	Лог.Информация("Получение изменений с удаленного узла (pull)");
	
	ГитРепозиторий = ПолучитьГитРепозиторий(КаталогРабочейКопии);
	ГитРепозиторий.Получить(URLРепозитория, ИмяВетки);
	
КонецПроцедуры

Процедура ПослеОкончанияВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки, КонтекстПлагина) Экспорт
	
КонецПроцедуры

Процедура ПослеКоммита(ГитРепозиторий, КаталогРабочейКопии, КонтекстПлагина) Экспорт

КонецПроцедуры

Функция ПолучитьГитРепозиторий(Знач КаталогРабочейКопии)
	
	ФайлКаталога = Новый Файл(ОбъединитьПути(ТекущийКаталог(), КаталогРабочейКопии));
	Если ФайлКаталога.ПолноеИмя = РабочийКаталогСохр Тогда
		ГитРепозиторий = ГитРепозиторийСохр;
	Иначе
		ГитРепозиторий = Новый ГитРепозиторий;
		ГитРепозиторий.УстановитьРабочийКаталог(КаталогРабочейКопии);
		ГитРепозиторий.УстановитьНастройку("core.quotepath", "false", РежимУстановкиНастроекGit.Локально);
		ГитРепозиторий.УстановитьНастройку("merge.ours.driver", "true", РежимУстановкиНастроекGit.Локально);

		РабочийКаталогСохр = ФайлКаталога.ПолноеИмя;
		ГитРепозиторийСохр = ГитРепозиторий;

	КонецЕсли;

	Возврат ГитРепозиторий;
	
КонецФункции // ПолучитьГитРепозиторий()


Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	
	Возврат СтрШаблон("[PLUGIN] %1: %2 - %3", ИмяПлагина(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);
	
КонецФункции

Функция ИмяПлагина()
	возврат "pull";
КонецФункции // ИмяПлагина()

Процедура Инициализация()

	ВерсияПлагина = "1.0.0";
	Лог = Логирование.ПолучитьЛог("oscript.app.gitsync.plugins."+ ИмяПлагина());
	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");
	КомандыПлагина.Добавить("export");
	
	URLРепозитория = Неопределено;
	ИмяВетки = "master";
	СчетчикКоммитов = 0;

	Лог.УстановитьРаскладку(ЭтотОбъект);

КонецПроцедуры

Инициализация();
