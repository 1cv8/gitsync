
#Использовать logos
#Использовать gitrunner

Перем ВерсияПлагина;
Перем Лог;
Перем КомандыПлагина;

Перем Обработчик;

Перем ИмяФайлаДампаКонфигурации;
Перем ФайлВерсийМетаданных;
Перем ОчиститьКаталогРабочейКопии;
Перем ВыгрузкаИзмененийВозможна;

Функция Информация() Экспорт
	
	Возврат Новый Структура("Версия, Лог", ВерсияПлагина, Лог)
	
КонецФункции // Информация() Экспорт

Процедура ПриАктивизацииПлагина(СтандартныйОбработчик) Экспорт
	
	Обработчик = СтандартныйОбработчик;
	
КонецПроцедуры

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации, Парсер) Экспорт

	Лог.Отладка("Ищю команду <%1> в списке поддерживаемых", ИмяКоманды);
	Если КомандыПлагина.Найти(ИмяКоманды) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Лог.Отладка("Устанавливаю дополнительные параметры для команды %1", ИмяКоманды);
	
КонецПроцедуры

Процедура ПередВыгрузкойКонфигурациюВИсходники(Конфигуратор, КаталогРабочейКопии, КаталогВыгрузки, ПутьКХранилищу, НомерВерсии, Формат)

	ТекущийФайлВерсийМетаданных = Новый Файл(ОбъединитьПути(КаталогРабочейКопии, ИмяФайлаДампаКонфигурации));

	Если ТекущийФайлВерсийМетаданных.Существует() Тогда

		ФайлВерсийМетаданных = Новый Файл(ОбъединитьПути(КаталогВыгрузки, ИмяФайлаДампаКонфигурации));

		КопироватьФайл(ТекущийФайлВерсийМетаданных.ПолноеИмя, ФайлВерсийМетаданных.ПолноеИмя);

		ВыгрузкаИзмененийВозможна = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПриВыгрузкеКонфигурациюВИсходники(Конфигуратор, КаталогВыгрузки, Формат, СтандартнаяОбработка) Экспорт

	Если ВыгрузкаИзмененийВозможна Тогда

		СтандартнаяОбработка = ложь;
		ОчиститьКаталогРабочейКопии = Истина;
		
		ДобавитьФайлLock(КаталогВыгрузки);
		Конфигуратор.ВыгрузитьКонфигурациюВФайлы(КаталогВыгрузки, Формат, Истина, ФайлВерсийМетаданных);
		
		ОчиститьКаталогРабочейКопии = НЕ ФайлLockСуществует(КаталогВыгрузки);
		
		УдалитьФайлLock(КаталогВыгрузки);

	КонецЕсли;

КонецПроцедуры

Процедура ПриОчисткеКаталогаРабочейКопии(КаталогРабочейКопии, СоответствиеИменФайловДляПропуска, СтандартнаяОбработка) Экспорт

	Если ВыгрузкаИзмененийВозможна Тогда
		Если НЕ ОчиститьКаталогРабочейКопии Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьФайлLock(КаталогВыгрузки)
	
	ПульКФайлуLock = ОбъединитьПути(КаталогВыгрузки, ИмяФайлаLock());
	ТекстовыйДокумент = Новый ЗаписьТекста(ПульКФайлуLock);
	ТекстовыйДокумент.Закрыть();

КонецПроцедуры

Процедура УдалитьФайлLock(КаталогВыгрузки)
	
	ПульКФайлуLock = ОбъединитьПути(КаталогВыгрузки, ИмяФайлаLock());
	
	УдалитьФайлы(ПульКФайлуLock);
	
КонецПроцедуры

Функция ФайлLockСуществует(КаталогВыгрузки)
	
	ФайлLock = Новый Файл(ОбъединитьПути(КаталогВыгрузки, ИмяФайлаLock()));
	
	Возврат ФайлLock.Существует();
	
КонецФункции

Функция ИмяФайлаLock()
	возврат ".increment-lock";
КонецФункции

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт
	
	Возврат СтрШаблон("[PLUGIN] %1: %2 - %3", ИмяПлагина(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);
	
КонецФункции

Функция ИмяПлагина()
	возврат "increment";
КонецФункции // ИмяПлагина()

Процедура Инициализация()

	ВерсияПлагина = "1.0.0";
	Лог = Логирование.ПолучитьЛог("oscript.app.gitsync.plugins."+ ИмяПлагина());
	КомандыПлагина = Новый Массив;
	КомандыПлагина.Добавить("sync");
	КомандыПлагина.Добавить("export");
	ФайлВерсийМетаданных = Неопределено;
	ИмяФайлаДампаКонфигурации = "ConfigDumpInfo.xml";
	ОчиститьКаталогРабочейКопии = Истина;
	ВыгрузкаИзмененийВозможна = Ложь;
	Лог.УстановитьРаскладку(ЭтотОбъект);

КонецПроцедуры

Инициализация();
