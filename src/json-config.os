
#Использовать json

Перем мНастройки;

Функция ПрочитатьФайл(Знач ИмяФайла)
	ФайлСуществующий = Новый Файл(ИмяФайла);
	Если Не ФайлСуществующий.Существует() Тогда
		ВызватьИсключение "Неверная структура файла настроек / файл пустой";;
	КонецЕсли;

	Чтение = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF8);
	Рез  = Чтение.Прочитать();
	Чтение.Закрыть();
	Возврат Рез;
КонецФункции // ПрочитатьФайл()

Функция ПрочитатьНастройкиИзФайла(Знач ФайлНастроек) Экспорт
	
	мНастройки = Новый Структура;
	
	JsonСтрока  = ПрочитатьФайл(ФайлНастроек);
	JsonСтрока = ВырезатьКомментарииИзТекстаJSON(JsonСтрока);
	
	ПарсерJSON  = Новый ПарсерJSON();
	ПараметрыJSON = ПарсерJSON.ПрочитатьJSON(JsonСтрока);

	ВсеНастройки = ПараметрыJSON["gitsync-options"];
	ГлобальныеНастройки = ВсеНастройки["global"];
	
	Для Каждого КлючИЗначение Из ГлобальныеНастройки Цикл

		Если КлючИЗначение.Ключ = "email-domain" Тогда
			Ключ = "ДоменПочтыДляGit";
		ИначеЕсли КлючИЗначение.Ключ = "v8-version" Тогда
			Ключ = "ПутьКПлатформе83";
		ИначеЕсли КлючИЗначение.Ключ = "git-executable" Тогда
			Ключ = "ПутьGit";
		Иначе
			ВызватьИсключение НекорректнаяСтруктураНастроек();
		КонецЕсли;

		мНастройки.Вставить(Ключ, КлючИЗначение.Значение);

	КонецЦикла;
	
	мНастройки.Вставить("Репозитарии", Новый Массив);
	
	МассивРепозиториев = ВсеНастройки["repositories"];
	
	Для Каждого Репозиторий Из МассивРепозиториев Цикл
		
		ПрочитатьНастройкиРепозитория(Репозиторий);
		
	КонецЦикла;


	Возврат мНастройки;	
	
КонецФункции


Функция ВырезатьКомментарииИзТекстаJSON(Знач JsonСтрока)
	
		// вырезаем обычные комменты типа "// комментарий"
		Регулярка = Новый РегулярноеВыражение("(^\/\/.*$)");
		Рез = Регулярка.Заменить(JsonСтрока, "$0" );
	
		// вырезаем комменты после строки, например, "строка //комментарий"
		Регулярка = Новый РегулярноеВыражение("(^.*)(\/\/.*$)");
		Рез = Регулярка.Заменить(Рез, "$1" );
	
		Возврат Рез;

КонецФункции // ВырезатьКомментарииИзТекстаJSON()

Процедура ПрочитатьНастройкиРепозитория(ЭлементМассива)
	
	Репо = Новый Структура;
	
	мНастройки.Репозитарии.Добавить(Репо);
	
	Для Каждого КлючИЗначение Из ЭлементМассива Цикл
						
		Если КлючИЗначение.Ключ = "name" Тогда
			Ключ = "Имя";
		ИначеЕсли КлючИЗначение.Ключ = "git-local-path" Тогда
			Ключ = "КаталогВыгрузки";
		ИначеЕсли КлючИЗначение.Ключ = "git-remote" Тогда
			Ключ = "GitURL";
		ИначеЕсли КлючИЗначение.Ключ = "v8-storage-dir" Тогда
			Ключ = "КаталогХранилища1С";
		ИначеЕсли КлючИЗначение.Ключ = "email-domain" Тогда
			Ключ = "ДоменПочтыДляGit";
		ИначеЕсли КлючИЗначение.Ключ = "v8-version" Тогда
			Ключ = "ПутьКПлатформе83";
		ИначеЕсли КлючИЗначение.Ключ = "git-executable" Тогда
			Ключ = "ПутьGit";
		ИначеЕсли КлючИЗначение.Ключ = "push-every-n-commits" Тогда
			Ключ = "КоличествоКоммитовДоPush";
		ИначеЕсли КлючИЗначение.Ключ = "check-authors" Тогда
			Ключ = "ПроверитьАвторовХранилища";
		ИначеЕсли КлючИЗначение.Ключ = "stop-if-empty-comment" Тогда
			Ключ = "ПрерватьВыполнениеБезКомментарияКВерсии";
		ИначеЕсли КлючИЗначение.Ключ = "auto-set-tags" Тогда
			Ключ = "АвтоматическаяУстановкаТэговПоВерсиям";
		ИначеЕсли КлючИЗначение.Ключ = "process-fatform-modules" Тогда
			Ключ = "ПереименовыватьФайлМодуляОбычнойФормы";
		Иначе
			ВызватьИсключение НекорректнаяСтруктураНастроек();
		КонецЕсли;
		
		Если ПустаяСтрока(КлючИЗначение.Значение) и мНастройки.Свойство(Ключ) Тогда
			КлючИЗначение.Значение = мНастройки[Ключ];
		КонецЕсли;
		
		Репо.Вставить(Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;

	Для Каждого ГлобальнаяНастройка Из мНастройки Цикл

		Ключ = ГлобальнаяНастройка.Ключ;

		Если ГлобальнаяНастройка.Ключ  = "Репозитарии" Тогда
			Продолжить
		КонецЕсли;
		
		ЕстьСвояНастройка = Репо.Свойство(Ключ);

		Если НЕ ЕстьСвояНастройка 
			ИЛИ ЕстьСвояНастройка и ПустаяСтрока(Репо[Ключ]) Тогда
		
			Репо.Вставить(Ключ, ГлобальнаяНастройка.Значение);
		КонецЕсли;

	КонецЦикла

КонецПроцедуры

Функция НекорректнаяСтруктураНастроек()
	Возврат "Некорректная структура файла настроек";
КонецФункции
