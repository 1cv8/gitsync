#Использовать opm

Перем Лог;
Перем ВнутреннийМенеджерУстановкиПакетов;
Перем КаталогПлагинов;
Перем КаталогЗависимостей;

Процедура УстановитьКаталогПлагинов(Знач НовыйКаталогПлагинов) Экспорт
	
	КаталогПлагинов = НовыйКаталогПлагинов;
	ВнутреннийМенеджерУстановкиПакетов = Неопределено;
КонецПроцедуры

Процедура УстановитьКаталогЗависимостей(Знач НовыйКаталогЗависимостей) Экспорт
	
	КаталогЗависимостей = НовыйКаталогЗависимостей;
	ВнутреннийМенеджерУстановкиПакетов = Неопределено;
КонецПроцедуры

Процедура УстановитьФайлПлагина(Знач ПутьКПлагину) Экспорт
	
	ФайлПлагина = Новый Файл(ПутьКПлагину);

	Если Не ФайлПлагина.Существует() Тогда
		Лог.КритичнаяОшибка("Плагин не установлен. Файл <%1> плагина не найден", ПутьКПлагину);
		ВызватьИсключение "";
	КонецЕсли;

	УстановщикПлагинов = ПолучитьМенеджерУстановкиПакетов();
	УстановщикПлагинов.УстановитьПакетИзАрхива(ПутьКПлагину);

КонецПроцедуры

Процедура УстановитьПлагинПоИмени(Знач ИмяПлагина) Экспорт
	
	УстановщикПлагинов = ПолучитьМенеджерУстановкиПакетов();
	УстановщикПлагинов.УстановитьПакет(ИмяПлагина);

КонецПроцедуры

Функция УстановитьПлагинСGitHub(Знач URL, Знач ТегВерсия = Неопределено) Экспорт

КонецФункции

Функция ПрочитатьОписаниеПлагина(Знач ПутьКФайлуПлагина)

	Описание = Новый ОписаниеПакета();

	ПутьКМанифесту = ОбъединитьПути(ПутьКФайлуПлагина, "packagedef");
	
	Файл_Манифест = Новый Файл(ПутьКМанифесту);
	Если Файл_Манифест.Существует() Тогда
		Контекст = Новый Структура("Описание", Описание);
        ЗагрузитьСценарий(ПутьКМанифесту, Контекст);
    КонецЕсли;

	Возврат Описание.Свойства();

КонецФункции

Функция ПолучитьМенеджерУстановкиПакетов() 

	Если ВнутреннийМенеджерУстановкиПакетов = Неопределено Тогда
		ВнутреннийМенеджерУстановкиПакетов = Новый МенеджерУстановкиПакетов("Локально",
							 КаталогПлагинов,
							 КаталогЗависимостей);

	КонецЕсли;

	Возврат ВнутреннийМенеджерУстановкиПакетов;
	
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.lib.gitsync.plugins.installer");
// Лог.УстановитьУровень(УровниЛога.Отладка);