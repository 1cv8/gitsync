#Использовать configor

Перем Лог; // Объект, для логирования

Перем УдалятьВременныеФайлы; // Булево, признак удаления временных файлов
Перем КоличествоЦикловОжиданияЛицензииПоУмолчанию; // Число, количество попыток получения лицензии

Перем АвторизацияВХранилище; // Структура ключи <Пользователь>, <ПарольПользователя>
Перем ПутьКИсполняемомуФайлуGit; // Строка, полный путь к исполняемому файлу git

///////////////////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Перем ДоменПочтыДляGitПоУмолчанию Экспорт; // Строка, домен пользователей по умолчанию
Перем ТекущаяВерсияПлатформы Экспорт; // Строка, используемая версия 1С.Предприятие

Перем ТаймерПовторения;
Перем ПутьКФайлуНастроек;
Перем КаталогПлагинов;
Перем ПутьКФайлуВключенныхПлагинов;
Перем ПутьКВременномуКаталогу;

Перем ИндексРепозиториев;
Перем Параметры;

#Область Публичное_API

// Устанавливает параметры авторизации в хранилище конфигурации 1С
//
// Параметры:
//   Пользователь - Строка - пользователь хранилища конфигурации 1С
//   Пароль - Строка - пароль пользователя хранилища конфигурации 1С
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция АвторизацияВХранилищеКонфигурации(Знач Пользователь, Знач Пароль) Экспорт

	Лог.Отладка("Установлена авторизация в хранилище пользователь <%1>, пароль <%2>", Пользователь, Пароль);
	АвторизацияВХранилище.Вставить("ПользовательХранилища" , Пользователь);
	АвторизацияВХранилище.Вставить("ПарольХранилища", Пароль);

	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает признак необходимости удаления временных файлов
//
// Параметры:
//   ПарамУдалятьВременныеФайлы - Булево - признак необходимости удаления временных файлов
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция РежимУдаленияВременныхФайлов(Знач ПарамУдалятьВременныеФайлы) Экспорт

	УдалятьВременныеФайлы = ПарамУдалятьВременныеФайлы;
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает количество циклов ожидания лицензий
//
// Параметры:
//   КоличествоЦиклов - Число - количество циклов ожидания лицензии
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция ЦикловОжиданияЛицензии(Знач КоличествоЦиклов) Экспорт

	КоличествоЦикловОжиданияЛицензииПоУмолчанию = КоличествоЦиклов;
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает уровень вывода логов
//
// Параметры:
//   НовыйУровеньЛога - Строка - уровень вывода лога
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция УровеньЛога(Знач НовыйУровеньЛога) Экспорт

	Лог.УстановитьУровень(НовыйУровеньЛога);
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает домен для почты по умолчанию
//
// Параметры:
//   НовыйДоменПочтыДляGit - Строка - новый домен для почты по умолчанию
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция ДоменПочтыПоУмолчанию(Знач НовыйДоменПочтыДляGit) Экспорт

	ДоменПочтыДляGitПоУмолчанию = НовыйДоменПочтыДляGit;
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает версию платформы 1С
//
// Параметры:
//   НоваяВерсияПлатформы - Строка - версия платформы 1С используемой для работы
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция ВерсияПлатформы(Знач НоваяВерсияПлатформы) Экспорт

	ТекущаяВерсияПлатформы = НоваяВерсияПлатформы;
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает путь к исполняемому файлу git
//
// Параметры:
//   НовыйПутьКИсполняемомуФайлуГит - Строка - путь к исполняемому файлу git
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция ИсполняемыйФайлГит(Знач НовыйПутьКИсполняемомуФайлуГит) Экспорт

	ПутьКИсполняемомуФайлуGit = НовыйПутьКИсполняемомуФайлуГит;
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает путь к файлу настроек пакетной синхронизации
//
// Параметры:
//   НовыйПутьКФайлуНастроек - Строка - путь к настроек пакетной синхронизации
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция УстановитьНастройки(НовыйПутьКФайлуНастроек) Экспорт
	ПутьКФайлуНастроек = НовыйПутьКФайлуНастроек;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает таймер повторения пакетной синхронизации
//
// Параметры:
//   НовыйТаймерПовторения - Число - таймер повторной синхронизации, сек
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция ТаймерПовторения(Знач НовыйТаймерПовторения) Экспорт
	ТаймерПовторения = НовыйТаймерПовторения;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает путь к каталогу плагинов
//
// Параметры:
//   НовыйКаталогПлагинов - Строка - путь к каталогу плагинов
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция КаталогПлагинов(Знач НовыйКаталогПлагинов) Экспорт
	КаталогПлагинов = НовыйКаталогПлагинов;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает путь к файлу включенных плагинов
//
// Параметры:
//   НовыйПутьКФайлуВключенныхПлагинов - Строка - путь к файлу включенных плагинов
//
// Возвращаемое значение:
//   Объект.МенеджерСинхронизации - ссылка на текущий объект класса <МенеджерСинхронизации>
//
Функция ФайлВключенныхПлагинов(Знач НовыйПутьКФайлуВключенныхПлагинов) Экспорт
	ПутьКФайлуВключенныхПлагинов = НовыйПутьКФайлуВключенныхПлагинов;
	Возврат ЭтотОбъект;
КонецФункции

// Выполняет пакетную синхронизацию
//
Процедура ВыполнитьСинхронизацию() Экспорт
	
	Пока Истина Цикл

		ПакетнаяСинхронизация();

		Если ТаймерПовторения <= 0 Тогда

			Прервать;

		Иначе
			
			Лог.Информация("Ожидаем <%1> секунд перед новым циклом", ТаймерПовторения);
			Приостановить(ТаймерПовторения * 1000);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Процедура ПрочитатьФайлНастроек()

	МенеджерПараметров = Новый МенеджерПараметров();
	МенеджерПараметров.УстановитьФайлПараметров(ПутьКФайлуНастроек);
	МенеджерПараметров.ИспользоватьПровайдерJSON();
	МенеджерПараметров.ИспользоватьПровайдерYAML();
	МенеджерПараметров.КонструкторПараметров(ЭтотОбъект);
	Лог.Отладка("Чтение файла настроек начато");
	МенеджерПараметров.Прочитать();
	Лог.Отладка("Чтение файла настроек завершено");

КонецПроцедуры

#Область Интерфейс_конструктора_параметров

Функция Параметры() Экспорт
	Возврат Параметры;
КонецФункции

Процедура УстановитьПараметры(Знач ВходящиеПараметры) Экспорт
	Лог.Отладка("Устанавливаю параметры");
	Параметры = ВходящиеПараметры;
КонецПроцедуры

Процедура ОписаниеПараметров(Знач Конструктор) Экспорт

	ПараметрыПлагины = Конструктор.НовыеПараметры("Плагины");
	ПараметрыПлагины.ПолеМассив("ВключенныеПлагины enable", Тип("Строка"))
		.ПолеМассив("ОтключенныеПлагины disable", Тип("Строка"))
		;

	ПараметрыНастроекПлагинов = Конструктор.НовыеПараметры("НастройкиПлагинов");
	ПараметрыНастроекПлагинов.ПроизвольныеПоля();

	ГлобальныеПараметры = Конструктор.НовыеПараметры("ГлобальныеПараметры");
	ГлобальныеПараметры.ПолеСтрока("ПользовательХранилища storage-user user", АвторизацияВХранилище.ПользовательХранилища)
		.ПолеСтрока("ПарольПользователяХранилища storage-pwd storage-password password pwd", АвторизацияВХранилище.ПарольХранилища)
		.ПолеСтрока("ПутьИсполняемомуФайлуГит git-path git", ПутьКИсполняемомуФайлуGit)
		.ПолеСтрока("ПутьКВременномуКаталогу temp-dir tempdir temp", ПутьКВременномуКаталогу)
		.ПолеСтрока("ВерсияПлатформы v8version v8", ТекущаяВерсияПлатформы)
		.ПолеСтрока("ДоменПочтыПоУмолчанию domain-email email", ДоменПочтыДляGitПоУмолчанию)
		.ПолеЧисло("КоличествоЦикловОжиданияЛицензии lic-try-count", КоличествоЦикловОжиданияЛицензииПоУмолчанию)
		.ПолеОбъект("Плагины plugins", ПараметрыПлагины)
		.ПолеМассив("НастройкиПлагинов plugins-config flags", ПараметрыНастроекПлагинов)
		;

	ПараметрыПлагиныРепозитория = ПараметрыПлагины.Скопировать("ПлагиныРепозитория");
	ПараметрыПлагиныРепозитория.ПолеМассив("ДополнительныеПлагины extra additional more", Тип("Строка"))
		;
	ПараметрыРепозитория = Конструктор.НовыеПараметры("Репозиторий");
	ПараметрыРепозитория.ПолеБулево("Отключено disable", Ложь)
		.ПолеСтрока("Наименование storage-name name")
		.ПолеСтрока("ПутьКХранилищю storage-path path")
		.ПолеСтрока("ПутьРабочемуКаталогу work-dir git-local-path dir")
		.ПолеСтрока("ПользовательХранилища storage-user user")
		.ПолеСтрока("ПарольПользователяХранилища storage-pwd storage-password password pwd")
		.ПолеСтрока("ПутьИсполняемомуФайлуГит git-path git")
		.ПолеСтрока("ПутьКВременномуКаталогу temp-dir tempdir temp")
		.ПолеСтрока("ВерсияПлатформы v8version v8")
		.ПолеСтрока("ДоменПочтыПоУмолчанию domain-email email")
		.ПолеЧисло("КоличествоЦикловОжиданияЛицензии lic-try-count", КоличествоЦикловОжиданияЛицензииПоУмолчанию)
		.ПолеОбъект("Плагины plugins", ПараметрыПлагиныРепозитория)
		.ПолеМассив("НастройкиПлагинов plugins-config flags", ПараметрыНастроекПлагинов)
		;

	Конструктор.ПолеОбъект("НастройкиПоУмолчанию globals default", ГлобальныеПараметры)
		.ПолеМассив("Репозитории repositories", ПараметрыРепозитория)
		;

КонецПроцедуры

#КонецОбласти

Процедура ПакетнаяСинхронизация()

	ПрочитатьФайлНастроек();

	ПодготовитьИндексРепозиториев();

	Для каждого Репозиторий Из ИндексРепозиториев Цикл
		
		Репозиторий.Синхронизировать();

	КонецЦикла;

КонецПроцедуры

Процедура ПодготовитьИндексРепозиториев()

	Для каждого ПараметрыРепозитория Из Параметры.Репозитории Цикл

		РепоСинхронизации = ИндексРепозиториев[ПараметрыРепозитория.Наименование];
		ОтключенныйРепозиторий = ПараметрыРепозитория.Отключено;

		Если ОтключенныйРепозиторий 
			И НЕ РепоСинхронизации = Неопределено Тогда
			ИндексРепозиториев.Удалить(РепоСинхронизации);
		КонецЕсли;

		Если ОтключенныйРепозиторий Тогда
			Продолжить;
		КонецЕсли;

		Если РепоСинхронизации = Неопределено Тогда

			РепоСинхронизации = Новый РепозиторийСинхронизации();
			РепоСинхронизации.КаталогПлагинов(КаталогПлагинов)
							 .ФайлВключенныхПлагинов(ПутьКФайлуВключенныхПлагинов)
							//  .УровеньЛога(Лог.ПолучитьУровеньЛога())
							 ;
			
			ИндексРепозиториев.Вставить(ПараметрыРепозитория.Наименование, РепоСинхронизации);
			
		КонецЕсли;

		ОбъединитьПараметрыРепозиторияИГлобальные(ПараметрыРепозитория);

		РепоСинхронизации.ПрочитатьПараметры(ПараметрыРепозитория);

	КонецЦикла;

КонецПроцедуры

Процедура ОбъединитьПараметрыРепозиторияИГлобальные(ПараметрыРепозитория)

	ГлобальныеПараметры = Параметры.НастройкиПоУмолчанию;

	Для каждого ГлобальныйПараметр Из ГлобальныеПараметры Цикл
		
		КлючПараметра = ГлобальныйПараметр.Ключ;
		ЗначениеПараметра = ГлобальныйПараметр.Значение;

		Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
			Продолжить;
		КонецЕсли;

		ЗначениеИзПараметровРепо = ПараметрыРепозитория[КлючПараметра];

		Если КлючПараметра = "Плагины" Тогда
			ОбъединитьПлагины(ЗначениеПараметра, ЗначениеИзПараметровРепо);
			Продолжить;
		ИначеЕсли КлючПараметра = "НастройкиПлагинов" Тогда
			ОбъединитьНастройкиПлагинов(ЗначениеПараметра, ЗначениеИзПараметровРепо);
			Продолжить;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ЗначениеИзПараметровРепо) Тогда
			ПараметрыРепозитория.Вставить(КлючПараметра, ЗначениеПараметра);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОбъединитьНастройкиПлагинов(ГлобальныеНастройкиПлагинов, НастройкиПлагиновРепозитория)

	Для каждого ГлобальнаяНастройкаПлагина Из ГлобальныеНастройкиПлагинов Цикл

		КлючНастройки = ГлобальнаяНастройкаПлагина.Ключ;
		ЗначениеНастройки = ГлобальнаяНастройкаПлагина.Значение;

		ЗначениеНастройкиИзРепозитория = НастройкиПлагиновРепозитория[КлючНастройки];

		Если ЗначениеНастройкиИзРепозитория = Неопределено Тогда
			НастройкиПлагиновРепозитория.Вставить(КлючНастройки, ЗначениеНастройки);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ОбъединитьПлагины(ГлобальныеПлагины, ПлагиныРепозитория)
	
	ВключенныеПлагины = ГлобальныеПлагины.ВключенныеПлагины;
	ВключенныеПлагиныРепозитория = ПлагиныРепозитория.ВключенныеПлагины;
	
	Если ВключенныеПлагиныРепозитория.Количество() = 0 Тогда
		ДополнитьМассив(ВключенныеПлагины, ВключенныеПлагиныРепозитория);
	КонецЕсли;
	
	ОтключенныеПлагины = ГлобальныеПлагины.ОтключенныеПлагины;
	ОтключенныеПлагиныРепозитория = ПлагиныРепозитория.ОтключенныеПлагины;

	Если ОтключенныеПлагиныРепозитория.Количество() = 0 Тогда
		ДополнитьМассив(ОтключенныеПлагины, ОтключенныеПлагиныРепозитория);
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьМассив(Источник, Приемник)

	Для каждого Элемент Из Источник Цикл
		
		Если Приемник.Найти(Элемент) = Неопределено Тогда
			Приемник.Добавить(Элемент);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ПриСозданииОбъекта()
	
	ИндексРепозиториев = Новый Соответствие;
	АвторизацияВХранилище = Новый Структура;
	ТаймерПовторения = 0;

	Лог = Логирование.ПолучитьЛог("oscript.lib.gitsync.batch");

КонецПроцедуры