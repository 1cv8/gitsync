#Использовать delegate

Перем ЗагруженныеПлагины;
Перем ПлагиныОбработчики;
Перем Отказ;
Перем СтандартнаяОбработка;
Перем РефлекторПроверкиКоманд;
Перем ДополнительныеПараметрыПлагинов;


Процедура ЗагрузитьПлагины(МассивНаименованийПлагинов, СтандартныйОбработчик) Экспорт

	ИмяПлагина = "auto-set-tags";
	ПутьКПлагину = "../../buldle--plugins/auto-set-tags.os";
	Контекст = Новый Структура("Обработчик", СтандартныйОбработчик); // 4 знака хватит
	// В коде скрипта somescript.os будет доступна глобальная переменная "ЧислоПи"
	ЗагруженныйПлагин = ЗагрузитьСценарий(ПутьКПлагину, Контекст); //: ИнформацияОСценарии
	ЗагрузитьПлагин(ИмяПлагина, ЗагруженныйПлагин);

КонецПроцедуры


Процедура ПередНачаломЦиклаОбработкиВерсий(ТаблицаИсторииХранилища, ТекущаяВерсия, СледующаяВерсия, МаксимальнаяВерсияДляРазбора)
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ТаблицаИсторииХранилища);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
	ПараметрыВыполнения.Добавить(СледующаяВерсия);	
	ПараметрыВыполнения.Добавить(МаксимальнаяВерсияДляРазбора);	
	
	ВыполнитьПодключенныеПлагины("ПередНачаломЦиклаОбработкиВерсий", ПараметрыВыполнения);
	
КонецПроцедуры



Процедура ВыполнитьПодключенныеПлагины(Знач ИмяПроцедурыВыполнения, ПараметрыПроцедуры) Экспорт

	ПодключенныеПлагиныПроцедуры = ПлагиныОбработчики[ИмяПроцедурыВыполнения].ПодключенныеПлагины;
	
	Для Каждого Плагин Из ПодключенныеПлагиныПроцедуры Цикл

		ДополнительныеПараметры = ДополнительныеПараметрыПлагинов[Плагин.Ключ];

		Сообщить("Выполняю плагин: " + Плагин.Ключ);
		ПараметрыПроцедуры.Добавить(ДополнительныеПараметры);
		Плагин.Значение.Исполнить(ПараметрыПроцедуры);

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьПлагин(Знач ИмяПлагина, ЗагруженныйПлагин)

	ИнформацияОПлагине = ЗагруженныйПлагин.Информация();
	
	РеализованныеМетоды = НайтиРеализованныеМетодыВПлагине(ЗагруженныйПлагин);
	
	Для Каждого ИмяМетода Из РеализованныеМетоды Цикл
		ДелегатПлагина = НовыйДелегатПлагина(ЗагруженныйПлагин, ИмяМетода);
		ПлагиныОбработчики[ИмяМетода].ПодключенныеПлагины.Выставить(ИмяПлагина, ДелегатПлагина);

	КонецЦикла;
	ДополнительныеПараметрыПлагинов.Вставить(ИмяПлагина, Новый Структура);
	ЗагруженныеПлагины.Добавить(ИмяПлагина);
	
КонецПроцедуры

Функция НовыйДелегатПлагина(ОбъектОбработчик, Знач ИмяМетода) Экспорт
	
	Возврат Делегаты.Создать(ОбъектОбработчик, ИмяМетода);

КонецФункции // НовыйДелегатПлагина(ОбъектОбработчик, ИмяМетода) Экспорт

Функция НайтиРеализованныеМетодыВПлагине(Знач Обработчик)

	РеализованныеМетоды = Новый Массив;
	ДоступныеОбработчики = ДоступныеОбработчики();
	
	Для Каждого ТиповойОбработчик Из ДоступныеОбработчики Цикл

		Если Не ПроверитьМетодКласса(Обработчик, ТиповойОбработчик.ИмяПроцедуры, ТиповойОбработчик.КоличествоПараметров) Тогда
			Продолжить;
		КонецЕсли;

		РеализованныеМетоды.Добавить(ТиповойОбработчик.ИмяПроцедуры);

	КонецЦикла;

	Возврат РеализованныеМетоды;
КонецФункции // НайтиРеализованныеМетодыВПлагине()


Функция НовыйОбработчик(Знач ИмяПроцедуры, Знач КоличествоПараметров, Знач ДополнительныеПараметры = Неопределено )

	Возврат Новый ФиксированнаяСтруктура("ИмяПроцедуры, КоличествоПараметров, ДополнительныеПараметры",ИмяПроцедуры, КоличествоПараметров);

КонецФункции // НовыйОбработи()

Функция ДоступныеОбработчики() 

	МассивОбработчиков = новый Массив;
	МассивОбработчиков.Вставить(НовыйОбработчик("ПередНачаломВыполнения", 3)); // 
	МассивОбработчиков.Вставить(НовыйОбработчик("ПослеОкончанияВыполнения", 3));
	
	// Работа с коммитом изменений
	МассивОбработчиков.Вставить(НовыйОбработчик("ПередКоммитом", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПриКоммите", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПослеКоммита", 3));

	// Работа с таблицей авторов
	МассивОбработчиков.Вставить(НовыйОбработчик("ПередПолучениемАвторов", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПриПолученииАвторов", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПослеПолученияАвторов", 3));
	
	// Обработка строки версии хранилища
	МассивОбработчиков.Вставить(НовыйОбработчик("ПередНачаломЦиклаОбработкиВерсий", 5));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПередОбработкойВерсииХранилища", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПриОбработкеВерсииХранилища", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПослеОбработкиВерсииХранилища", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПриОкончанииЦиклаОбработкиВерсий", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПослеОкончанияЦиклаОбработкиВерсий", 3));
	
	// Работа с выгрузкой в исходники
	МассивОбработчиков.Вставить(НовыйОбработчик("ПередВыполнениемВыгрузки", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПриВыполненииВыгрузки", 3));
	МассивОбработчиков.Вставить(НовыйОбработчик("ПослеВыполненияВыгрузки", 3));
	

	Возврат Новый ФиксированныйМассив(МассивОбработчиков);
	
КонецФункции // ДоступныеОбработчики() Экспорт

Функция ПроверитьМетодКласса(Знач КлассРеализацииКоманды,
							Знач ИмяМетода,
							Знач ТребуемоеКоличествоПараметров = 0,
							Знач ЭтоФункция = Ложь)

	ЕстьМетод = РефлекторПроверкиКоманд.МетодСуществует(КлассРеализацииКоманды, ИмяМетода);

	Если Не ЕстьМетод Тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаМетодов = ПолучитьТаблицуМетодов(КлассРеализацииКоманды);
	СтрокаМетода = ТаблицаМетодов.Найти(ИмяМетода, "Имя");
	Если СтрокаМетода = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверкаНаФункцию = ЭтоФункция = СтрокаМетода.ЭтоФункция;
	ПроверкаНаКоличествоПараметров = ТребуемоеКоличествоПараметров = СтрокаМетода.КоличествоПараметров;

	//Сообщить(СтрШаблон("Класс %1 метод %2: %3", КлассРеализацииКоманды, ИмяМетода, ПроверкаНаФункцию 
	//		И ПроверкаНаКоличествоПараметров ));

	Возврат ПроверкаНаФункцию 
			И ПроверкаНаКоличествоПараметров;


КонецФункции // ПроверитьМетодУКласса()

Функция ПолучитьТаблицуМетодов(Знач КлассРеализацииКоманды)

	Возврат РефлекторПроверкиКоманд.ПолучитьТаблицуМетодов(КлассРеализацииКоманды);

КонецФункции

Процедура Инициализация()
		
	ПараметрыКоманды = Новый Массив;
	РефлекторПроверкиКоманд = Новый Рефлектор;
	СтандартнаяОбработка = Истина;
	Отказ = ложь;
	ИнициализацияПлагиныОбработчики();

КонецПроцедуры

Процедура ИнициализацияПлагиныОбработчики()

	ПлагиныОбработчики = Новый Соответствие;
	ДоступныеОбработчики = ДоступныеОбработчики();
	Для Каждого ТиповойОбработчик Из ДоступныеОбработчики Цикл

		ПлагиныОбработчики.Вставить(ТиповойОбработчик.ИмяПроцедуры, Новый Структура("Настройка, ПодключенныеПлагины", ТиповойОбработчик, Новый Соответствие));

	КонецЦикла;
	
КонецПроцедуры
	
Инициализация();

ЗагруженныеПлагины = Новый Соответствие;