#Использовать delegate
#Использовать logos

Перем ЗагруженныеПлагины;
Перем ПлагиныОбработчики;
Перем Отказ;
Перем СтандартнаяОбработка;
Перем РефлекторПроверкиКоманд;
Перем ДополнительныеПараметрыПлагинов;
Перем Лог;

Процедура ЗагрузитьПлагины(МассивНаименованийПлагинов, СтандартныйОбработчик) Экспорт

	МассивПутейПоискаПлагинов = Новый Массив;
	МассивПутейПоискаПлагинов.Добавить(ОбъединитьПути(ТекущийКаталог(),"src", "buldle-plugins"));
	МассивПутейПоискаПлагинов.Добавить(ОбъединитьПути(ТекущийКаталог(),"plugins"));
	
	Контекст = Новый Структура("Обработчик", СтандартныйОбработчик); // 4 знака хватит
	
	Для Каждого ИмяПлагина Из МассивНаименованийПлагинов Цикл
		Лог.Отладка("Ищю плагин: " + ИмяПлагина+ " в папке: "+ МассивПутейПоискаПлагинов[0]);
		Сообщить("Ищю плагин: " + ИмяПлагина+ " в папке: "+ МассивПутейПоискаПлагинов[0]);
		МассивФайлов = НайтиФайлы(МассивПутейПоискаПлагинов[0], СтрШаблон("%1.os",ИмяПлагина));
		Если МассивФайлов.Количество() = 1 Тогда
			ПутьКПлагину = МассивФайлов[0].ПолноеИмя;
			ЗагруженныйПлагин = ЗагрузитьСценарий(ПутьКПлагину, Контекст); //: ИнформацияОСценарии
			ЗагрузитьПлагин(ИмяПлагина, ЗагруженныйПлагин);
			Сообщить("Плагин: " + ИмяПлагина+ " загружен");
			
		КонецЕсли;

	КонецЦикла

КонецПроцедуры

#Область экспортные процедуры начало и окончания выполнения 

Процедура ПередНачаломВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);
	ПараметрыВыполнения.Добавить(URLРепозитория);
	ПараметрыВыполнения.Добавить(ИмяВетки);
	
	ВыполнитьПодключенныеПлагины("ПередНачаломВыполнения", ПараметрыВыполнения);
	

КонецПроцедуры

Процедура ПослеОкончанияВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);
	ПараметрыВыполнения.Добавить(URLРепозитория);
	ПараметрыВыполнения.Добавить(ИмяВетки);

	ВыполнитьПодключенныеПлагины("ПередНачаломВыполнения", ПараметрыВыполнения);

КонецПроцедуры

#КонецОбласти


Процедура ПослеПолученияТаблицыВерсий(ТаблицаИсторииХранилища, ПутьКХранилищу, КаталогРабочейКопии) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ТаблицаИсторииХранилища);
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);
	
	ВыполнитьПодключенныеПлагины("ПослеПолученияТаблицыВерсий", ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПередНачаломЦиклаОбработкиВерсий(ТаблицаИсторииХранилища, ТекущаяВерсия, СледующаяВерсия, МаксимальнаяВерсияДляРазбора) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ТаблицаИсторииХранилища);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
	ПараметрыВыполнения.Добавить(СледующаяВерсия);	
	ПараметрыВыполнения.Добавить(МаксимальнаяВерсияДляРазбора);	
	
	ВыполнитьПодключенныеПлагины("ПередНачаломЦиклаОбработкиВерсий", ПараметрыВыполнения);
	
КонецПроцедуры
#Область экспортные процедуры выполнения выгрузки конфигурации

Процедура ПередВыполнениемВыгрузки(КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);	
	ПараметрыВыполнения.Добавить(НомерВерсии);	
	ПараметрыВыполнения.Добавить(Формат);	
	ПараметрыВыполнения.Добавить(ПараметрыДоступаКХранилищу);	
	
	ВыполнитьПодключенныеПлагины("ПередВыполнениемВыгрузки", ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПриВыполненииВыгрузки(КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу, СтандартнаяОбработка) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);	
	ПараметрыВыполнения.Добавить(НомерВерсии);	
	ПараметрыВыполнения.Добавить(Формат);	
	ПараметрыВыполнения.Добавить(ПараметрыДоступаКХранилищу);	
	ПараметрыВыполнения.Добавить(СтандартнаяОбработка);	
	
	ВыполнитьПодключенныеПлагины("ПриВыполненииВыгрузки", ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПослеВыполненияВыгрузки(КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);	
	ПараметрыВыполнения.Добавить(НомерВерсии);	
	ПараметрыВыполнения.Добавить(Формат);	
	ПараметрыВыполнения.Добавить(ПараметрыДоступаКХранилищу);	
	
	ВыполнитьПодключенныеПлагины("ПослеВыполненияВыгрузки", ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область экспортные процедуры выполнения обработки строки версии 

Процедура ПередОбработкойВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтрокаВерсии);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
		
	ВыполнитьПодключенныеПлагины("ПередОбработкойВерсииХранилища", ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПриОбработкеВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтрокаВерсии);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
		
	ВыполнитьПодключенныеПлагины("ПриОбработкеВерсииХранилища", ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ПослеОбработкиВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтрокаВерсии);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
		
	ВыполнитьПодключенныеПлагины("ПослеОбработкиВерсииХранилища", ПараметрыВыполнения);
	
КонецПроцедуры

#КонецОбласти

#Область экспортные процедуры выполнения коммита

Процедура ПередКоммитом(КаталогРабочейКопии, Комментарий, Автор, Дата) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	ПараметрыВыполнения.Добавить(Комментарий);	
	ПараметрыВыполнения.Добавить(Автор);	
	ПараметрыВыполнения.Добавить(Дата);	
	
	ВыполнитьПодключенныеПлагины("ПередКоммитом", ПараметрыВыполнения);

КонецПроцедуры

Процедура ПриКоммите(ГитРепозиторий, 
						Комментарий, 
						ПроиндексироватьОтслеживаемыеФайлы, 
						ИмяФайлаКомментария, 
						авторДляГит,
						ДатаДляГит,
						Коммитер,
						ДатаКоммитера) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ГитРепозиторий);	
	ПараметрыВыполнения.Добавить(Комментарий);	
	ПараметрыВыполнения.Добавить(ПроиндексироватьОтслеживаемыеФайлы);	
	ПараметрыВыполнения.Добавить(авторДляГит);	
	ПараметрыВыполнения.Добавить(ДатаДляГит);	
	ПараметрыВыполнения.Добавить(Коммитер);	
	ПараметрыВыполнения.Добавить(ДатаКоммитера);	
	
	ВыполнитьПодключенныеПлагины("ПриКоммите", ПараметрыВыполнения);

КонецПроцедуры

Процедура ПослеКоммита(ГитРепозиторий, КаталогРабочейКопии) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ГитРепозиторий);	
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	
	ВыполнитьПодключенныеПлагины("ПослеКоммита", ПараметрыВыполнения);

КонецПроцедуры


#КонецОбласти

Процедура ВыполнитьПодключенныеПлагины(Знач ИмяПроцедурыВыполнения, ПараметрыПроцедуры) Экспорт

	ПодключенныеПлагиныПроцедуры = ПлагиныОбработчики[ИмяПроцедурыВыполнения].ПодключенныеПлагины;
	
	Для Каждого Плагин Из ПодключенныеПлагиныПроцедуры Цикл

		ДополнительныеПараметры = ДополнительныеПараметрыПлагинов[Плагин.Ключ];

		Лог.Отладка("[%1] выполняю плагин: %2", ИмяПроцедурыВыполнения, Плагин.Ключ);
		Делагат = Плагин.Значение;
		ПараметрыПроцедуры.Добавить(ДополнительныеПараметры);
		Делагат.Исполнить(ПараметрыПроцедуры);

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьПлагин(Знач ИмяПлагина, ЗагруженныйПлагин)

	ИнформацияОПлагине = ЗагруженныйПлагин.Информация();
	
	РеализованныеМетоды = НайтиРеализованныеМетодыВПлагине(ЗагруженныйПлагин);
	
	Для Каждого ИмяМетода Из РеализованныеМетоды Цикл
		ДелегатПлагина = НовыйДелегатПлагина(ЗагруженныйПлагин, ИмяМетода);
		ПлагиныОбработчики[ИмяМетода].ПодключенныеПлагины.Вставить(ИмяПлагина, ДелегатПлагина);

	КонецЦикла;
	
	ДополнительныеПараметрыПлагинов.Вставить(ИмяПлагина, Новый Структура);
	ЗагруженныеПлагины.Вставить(ИмяПлагина, ИнформацияОПлагине);
	
КонецПроцедуры

Функция НовыйДелегатПлагина(ОбъектОбработчик, Знач ИмяМетода) Экспорт
	
	Возврат Делегаты.Создать(ОбъектОбработчик, ИмяМетода);

КонецФункции // НовыйДелегатПлагина(ОбъектОбработчик, ИмяМетода) Экспорт

Функция НайтиРеализованныеМетодыВПлагине(Знач Обработчик)

	РеализованныеМетоды = Новый Массив;
	ДоступныеОбработчики = ДоступныеОбработчики();
	
	Для Каждого ТиповойОбработчик Из ДоступныеОбработчики Цикл

		Если Не ПроверитьМетодКласса(Обработчик, ТиповойОбработчик.ИмяПроцедуры, ТиповойОбработчик.КоличествоПараметров) Тогда
			Продолжить;
		КонецЕсли;

		РеализованныеМетоды.Добавить(ТиповойОбработчик.ИмяПроцедуры);

	КонецЦикла;

	Возврат РеализованныеМетоды;
КонецФункции // НайтиРеализованныеМетодыВПлагине()


Функция НовыйОбработчик(Знач ИмяПроцедуры, Знач КоличествоПараметров, Знач ДополнительныеПараметры = Неопределено )

	Возврат Новый ФиксированнаяСтруктура("ИмяПроцедуры, КоличествоПараметров, ДополнительныеПараметры",ИмяПроцедуры, КоличествоПараметров, ДополнительныеПараметры);

КонецФункции // НовыйОбработи()

Функция ДоступныеОбработчики() 

	МассивОбработчиков = новый Массив;
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередНачаломВыполнения", 5)); // 
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеОкончанияВыполнения", 5));
	
	// Работа с коммитом изменений
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередКоммитом", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриКоммите", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеКоммита", 3));

	// Работа с таблицей версий
	//МассивОбработчиков.Добавить(НовыйОбработчик("ПередПолучениемТаблицыВерсий", 3));
	//МассивОбработчиков.Добавить(НовыйОбработчик("ПриПолученииТаблицыВерсий", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеПолученияТаблицыВерсий", 4));
	
	
	// Работа с таблицей авторов
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередПолучениемАвторов", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриПолученииАвторов", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеПолученияАвторов", 3));
	
	// Обработка строки версии хранилища
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередНачаломЦиклаОбработкиВерсий", 5));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередОбработкойВерсииХранилища", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриОбработкеВерсииХранилища", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеОбработкиВерсииХранилища", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриОкончанииЦиклаОбработкиВерсий", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеОкончанияЦиклаОбработкиВерсий", 3));
	
	// Работа с выгрузкой в исходники
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередВыполнениемВыгрузки", 6));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриВыполненииВыгрузки", 7));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеВыполненияВыгрузки", 6));
	
	Возврат Новый ФиксированныйМассив(МассивОбработчиков);
	
КонецФункции // ДоступныеОбработчики() Экспорт

Функция ПроверитьМетодКласса(Знач КлассРеализацииКоманды,
							Знач ИмяМетода,
							Знач ТребуемоеКоличествоПараметров = 0,
							Знач ЭтоФункция = Ложь)

	ЕстьМетод = РефлекторПроверкиКоманд.МетодСуществует(КлассРеализацииКоманды, ИмяМетода);

	Если Не ЕстьМетод Тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаМетодов = ПолучитьТаблицуМетодов(КлассРеализацииКоманды);
	СтрокаМетода = ТаблицаМетодов.Найти(ИмяМетода, "Имя");
	Если СтрокаМетода = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверкаНаФункцию = ЭтоФункция = СтрокаМетода.ЭтоФункция;
	ПроверкаНаКоличествоПараметров = ТребуемоеКоличествоПараметров = СтрокаМетода.КоличествоПараметров;

	//Сообщить(СтрШаблон("Класс %1 метод %2: %3", КлассРеализацииКоманды, ИмяМетода, ПроверкаНаФункцию 
	//		И ПроверкаНаКоличествоПараметров ));

	Возврат ПроверкаНаФункцию 
			И ПроверкаНаКоличествоПараметров;


КонецФункции // ПроверитьМетодУКласса()

Функция ПолучитьТаблицуМетодов(Знач КлассРеализацииКоманды)

	Возврат РефлекторПроверкиКоманд.ПолучитьТаблицуМетодов(КлассРеализацииКоманды);

КонецФункции

Процедура Инициализация()
		
	ПараметрыКоманды = Новый Массив;
	РефлекторПроверкиКоманд = Новый Рефлектор;
	СтандартнаяОбработка = Истина;
	Отказ = ложь;
	ИнициализацияПлагиныОбработчики();
	ДополнительныеПараметрыПлагинов = Новый Соответствие;
	ЗагруженныеПлагины = Новый Соответствие;
КонецПроцедуры

Процедура ИнициализацияПлагиныОбработчики()

	ПлагиныОбработчики = Новый Соответствие;
	ДоступныеОбработчики = ДоступныеОбработчики();
	Для Каждого ТиповойОбработчик Из ДоступныеОбработчики Цикл

		ПлагиныОбработчики.Вставить(ТиповойОбработчик.ИмяПроцедуры, Новый Структура("Настройка, ПодключенныеПлагины", ТиповойОбработчик, Новый Соответствие));

	КонецЦикла;
	
КонецПроцедуры
	
Инициализация();

Лог = Логирование.ПолучитьЛог("oscript.app.gitsync-plugins");