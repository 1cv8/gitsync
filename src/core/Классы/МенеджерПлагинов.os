#Использовать delegate
#Использовать logos

Перем МассивЗагруженныхПлагинов;
Перем УстановленныеПлагины;

Перем ПлагиныОбработчики;
Перем Отказ;
Перем СтандартнаяОбработка;
Перем РефлекторПроверкиКоманд;
Перем ДополнительныеПараметрыПлагинов;
Перем Лог;

Процедура УстановитьАктивныеПлагины(ПараметрыКоманды) Экспорт

	МассивНаименованийПлагинов = ПараметрыКоманды["-plugins"];

	Если МассивНаименованийПлагинов = Неопределено Тогда
		возврат;
	КонецЕсли;

	Для каждого ИмяПлагина Из МассивНаименованийПлагинов Цикл
		
		ИнформацияОПлагине = УстановленныеПлагины[ИмяПлагина];

		Если ИнформацияОПлагине = Неопределено Тогда

			Лог.Отладка("НЕ НАЙДЕН! Установленный плагин "+ИмяПлагина );
			
			Продолжить
		КонецЕсли;

		Лог.Отладка("Установленный плагин выбран "+ИмяПлагина +" для запуска");
		МассивЗагруженныхПлагинов.Добавить(ИмяПлагина);
			
	КонецЦикла;

КонецПроцедуры

Процедура АктивизироватьПлагины(СтандартныйОбработчик) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтандартныйОбработчик);

	ВыполнитьПодключенныеПлагины("ПриАктивизацииПлагина", ПараметрыВыполнения);
	
КонецПроцедуры


Функция ЗагрузитьУстановленныеПлагины() Экспорт

	// Ищем установленные плагины

	МассивПутейПоискаПлагинов = Новый Массив;
	МассивПутейПоискаПлагинов.Добавить(ОбъединитьПути(ТекущийКаталог(),"src", "buldle-plugins"));
	МассивПутейПоискаПлагинов.Добавить(ОбъединитьПути(ТекущийКаталог(),"plugins"));

	Для Каждого ПутьКПапкеПлагина Из МассивПутейПоискаПлагинов Цикл
		Лог.Отладка("Ищю установленные плагины в : " + ПутьКПапкеПлагина);
		
		МассивФайлов = НайтиФайлы(ПутьКПапкеПлагина, "*.os");
		
		Для каждого НайденныйПлагин Из МассивФайлов Цикл
			

			ПутьКПлагину = НайденныйПлагин.ПолноеИмя;
			ИмяПлагина = НайденныйПлагин.ИмяБезРасширения;
			Попытка
				ЗагруженныйПлагин = ЗагрузитьСценарий(ПутьКПлагину); //: ИнформацияОСценарии
				УстановитьПлагин(ИмяПлагина, ЗагруженныйПлагин);
			Исключение
				Лог.КритичнаяОшибка("Не удалось загрузить плагин <%1> по причине: %2", ИмяПлагина, ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;

	КонецЦикла

КонецФункции


#Область экспортные процедуры начало и окончания выполнения 

Процедура ПередНачаломВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);
	ПараметрыВыполнения.Добавить(URLРепозитория);
	ПараметрыВыполнения.Добавить(ИмяВетки);
	
	ВыполнитьПодключенныеПлагины("ПередНачаломВыполнения", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки);

КонецПроцедуры

Процедура ПослеОкончанияВыполнения(ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);
	ПараметрыВыполнения.Добавить(URLРепозитория);
	ПараметрыВыполнения.Добавить(ИмяВетки);

	ВыполнитьПодключенныеПлагины("ПослеОкончанияВыполнения", ПараметрыВыполнения);

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ПутьКХранилищу, КаталогРабочейКопии, URLРепозитория, ИмяВетки);
	
КонецПроцедуры

#КонецОбласти

#Область экспортные процедуры регистрации команд приложения

Процедура ПослеРегистрацииКомандПриложения(Парсер) Экспорт

	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(Парсер);
	
	ВыполнитьПодключенныеПлагины("ПослеРегистрацииКомандПриложения", ПараметрыВыполнения);

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, Парсер);
	
КонецПроцедуры

Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации, Парсер) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ИмяКоманды);
	ПараметрыВыполнения.Добавить(КлассРеализации);
	ПараметрыВыполнения.Добавить(Парсер);
	
	ВыполнитьУстановленныеПлагины("ПриРегистрацииКомандыПриложения", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ИмяКоманды, КлассРеализации, Парсер);
	
КонецПроцедуры

Процедура ПередВыполнениемКоманды(ИмяКоманды, ПараметрыКоманды, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ИмяКоманды);
	ПараметрыВыполнения.Добавить(ПараметрыКоманды);
	ПараметрыВыполнения.Добавить(ДополнительныеПараметры);
	
	ВыполнитьПодключенныеПлагины("ПередВыполнениемКоманды", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ИмяКоманды, ПараметрыКоманды, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПриВыполненииКоманды(ПараметрыКоманды, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ПараметрыКоманды);
	ПараметрыВыполнения.Добавить(ДополнительныеПараметры);
	
	ВыполнитьПодключенныеПлагины("ПриВыполненииКоманды", ПараметрыВыполнения);

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ПараметрыКоманды, ДополнительныеПараметры);
	
КонецПроцедуры
	
Процедура ПослеВыполненияКоманды(ИмяКоманды, ПараметрыКоманды, ДополнительныеПараметры) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ИмяКоманды);
	ПараметрыВыполнения.Добавить(ПараметрыКоманды);
	ПараметрыВыполнения.Добавить(ДополнительныеПараметры);
	
	ВыполнитьПодключенныеПлагины("ПослеВыполненияКоманды", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ИмяКоманды, ПараметрыКоманды, ДополнительныеПараметры);
	
КонецПроцедуры


#КонецОбласти

#Область экспортные процедуры получения таблицы версий

Процедура ПриПолученииТаблицыВерсий(ТаблицаВерсий, ПутьКХранилищу, КаталогРабочейКопии, СтандартнаяОбработка) Экспорт

	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ТаблицаВерсий);
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);
	ПараметрыВыполнения.Добавить(СтандартнаяОбработка);
	
	ВыполнитьПодключенныеПлагины("ПриПолученииТаблицыВерсий", ПараметрыВыполнения);

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ТаблицаВерсий, ПутьКХранилищу, КаталогРабочейКопии, СтандартнаяОбработка);
	

КонецПроцедуры

Процедура ПослеПолученияТаблицыВерсий(ТаблицаВерсий, ПутьКХранилищу, КаталогРабочейКопии) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ТаблицаВерсий);
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);
	
	ВыполнитьПодключенныеПлагины("ПослеПолученияТаблицыВерсий", ПараметрыВыполнения);
	

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ТаблицаВерсий, ПутьКХранилищу, КаталогРабочейКопии);

КонецПроцедуры

#КонецОбласти

Процедура ПередНачаломЦиклаОбработкиВерсий(ТаблицаИсторииХранилища, ТекущаяВерсия, СледующаяВерсия, МаксимальнаяВерсияДляРазбора) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ТаблицаИсторииХранилища);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
	ПараметрыВыполнения.Добавить(СледующаяВерсия);	
	ПараметрыВыполнения.Добавить(МаксимальнаяВерсияДляРазбора);	
	
	ВыполнитьПодключенныеПлагины("ПередНачаломЦиклаОбработкиВерсий", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ТаблицаИсторииХранилища, ТекущаяВерсия, СледующаяВерсия, МаксимальнаяВерсияДляРазбора);
	
КонецПроцедуры

#Область экспортные процедуры выполнения выгрузки конфигурации

Процедура ПередВыполнениемВыгрузки(КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);	
	ПараметрыВыполнения.Добавить(НомерВерсии);	
	ПараметрыВыполнения.Добавить(Формат);	
	ПараметрыВыполнения.Добавить(ПараметрыДоступаКХранилищу);	
	
	ВыполнитьПодключенныеПлагины("ПередВыполнениемВыгрузки", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу);
	
КонецПроцедуры

Процедура ПриВыполненииВыгрузки(КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу, СтандартнаяОбработка) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);	
	ПараметрыВыполнения.Добавить(НомерВерсии);	
	ПараметрыВыполнения.Добавить(Формат);	
	ПараметрыВыполнения.Добавить(ПараметрыДоступаКХранилищу);	
	ПараметрыВыполнения.Добавить(СтандартнаяОбработка);	
	
	ВыполнитьПодключенныеПлагины("ПриВыполненииВыгрузки", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу, СтандартнаяОбработка);
	

КонецПроцедуры

Процедура ПослеВыполненияВыгрузки(КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	ПараметрыВыполнения.Добавить(ПутьКХранилищу);	
	ПараметрыВыполнения.Добавить(НомерВерсии);	
	ПараметрыВыполнения.Добавить(Формат);	
	ПараметрыВыполнения.Добавить(ПараметрыДоступаКХранилищу);	
	
	ВыполнитьПодключенныеПлагины("ПослеВыполненияВыгрузки", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, Формат, ПараметрыДоступаКХранилищу);
	
КонецПроцедуры

#КонецОбласти

#Область экспортные процедуры выполнения обработки строки версии 

Процедура ПередОбработкойВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтрокаВерсии);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
		
	ВыполнитьПодключенныеПлагины("ПередОбработкойВерсииХранилища", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, СтрокаВерсии, ТекущаяВерсия);

КонецПроцедуры

Процедура ПриОбработкеВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтрокаВерсии);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
		
	ВыполнитьПодключенныеПлагины("ПриОбработкеВерсииХранилища", ПараметрыВыполнения);

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, СтрокаВерсии, ТекущаяВерсия);
	
КонецПроцедуры

Процедура ПослеОбработкиВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(СтрокаВерсии);	
	ПараметрыВыполнения.Добавить(ТекущаяВерсия);	
		
	ВыполнитьПодключенныеПлагины("ПослеОбработкиВерсииХранилища", ПараметрыВыполнения);
	
	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, СтрокаВерсии, ТекущаяВерсия);
	
КонецПроцедуры

#КонецОбласти

#Область экспортные процедуры выполнения коммита

Процедура ПередКоммитом(КаталогРабочейКопии, Комментарий, Автор, Дата) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	ПараметрыВыполнения.Добавить(Комментарий);	
	ПараметрыВыполнения.Добавить(Автор);	
	ПараметрыВыполнения.Добавить(Дата);	
	
	ВыполнитьПодключенныеПлагины("ПередКоммитом", ПараметрыВыполнения);

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, КаталогРабочейКопии, Комментарий, Автор, Дата);

КонецПроцедуры

Процедура ПриКоммите(ГитРепозиторий, 
						Комментарий, 
						ПроиндексироватьОтслеживаемыеФайлы, 
						ИмяФайлаКомментария, 
						авторДляГит,
						ДатаДляГит,
						Коммитер,
						ДатаКоммитера) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ГитРепозиторий);	
	ПараметрыВыполнения.Добавить(Комментарий);	
	ПараметрыВыполнения.Добавить(ПроиндексироватьОтслеживаемыеФайлы);	
	ПараметрыВыполнения.Добавить(авторДляГит);	
	ПараметрыВыполнения.Добавить(ДатаДляГит);	
	ПараметрыВыполнения.Добавить(Коммитер);	
	ПараметрыВыполнения.Добавить(ДатаКоммитера);	
	
	ВыполнитьПодключенныеПлагины("ПриКоммите", ПараметрыВыполнения);

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ГитРепозиторий, Комментарий, ПроиндексироватьОтслеживаемыеФайлы, авторДляГит, ДатаДляГит, Коммитер, ДатаКоммитера);
	

КонецПроцедуры

Процедура ПослеКоммита(ГитРепозиторий, КаталогРабочейКопии) Экспорт
	
	ПараметрыВыполнения = Новый Массив;
	ПараметрыВыполнения.Добавить(ГитРепозиторий);	
	ПараметрыВыполнения.Добавить(КаталогРабочейКопии);	
	
	ВыполнитьПодключенныеПлагины("ПослеКоммита", ПараметрыВыполнения);

	ПрисвоитьЗначенияПараметраПроцедуры(ПараметрыВыполнения, ГитРепозиторий, КаталогРабочейКопии);

КонецПроцедуры


#КонецОбласти

Процедура ВыполнитьУстановленныеПлагины(Знач ИмяПроцедурыВыполнения, ПараметрыПроцедуры, ВыполнитьВсеУстановленные = Ложь) Экспорт
	
	ВыполнитьПодключенныеПлагины(ИмяПроцедурыВыполнения, ПараметрыПроцедуры, Истина);
	
КонецПроцедуры

Процедура ВыполнитьПодключенныеПлагины(Знач ИмяПроцедурыВыполнения, ПараметрыПроцедуры, ВыполнитьВсеУстановленные = Ложь) Экспорт

	ПодключенныеПлагиныПроцедуры = ПлагиныОбработчики[ИмяПроцедурыВыполнения].ПодключенныеПлагины;
	
	Для Каждого Плагин Из ПодключенныеПлагиныПроцедуры Цикл

		Если НЕ ВыполнитьВсеУстановленные 
			И МассивЗагруженныхПлагинов.Найти(Плагин.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ДополнительныеПараметры = ДополнительныеПараметрыПлагинов[Плагин.Ключ];

		Если ДополнительныеПараметры = Неопределено Тогда
			ДополнительныеПараметры = Новый Структура;
		КонецЕсли;

		Лог.Отладка("[%1] выполняю плагин: %2, количество параметров: %3", ИмяПроцедурыВыполнения, Плагин.Ключ, ПараметрыПроцедуры.Количество());
		
		Делагат = Плагин.Значение;
		ПараметрыПроцедурыПлагина = КопироватьМассив(ПараметрыПроцедуры);
		ПараметрыПроцедурыПлагина.Добавить(ДополнительныеПараметры);
		Делагат.Исполнить(ПараметрыПроцедурыПлагина);

		ДополнительныеПараметрыПлагинов.Вставить(Плагин.Ключ,ПараметрыПроцедурыПлагина[ПараметрыПроцедурыПлагина.Найти(ДополнительныеПараметры)]);

	КонецЦикла;
	
КонецПроцедуры

Функция КопироватьМассив(Знач ВходящийМассив)
	ИтоговыйМассив = Новый Массив;
	
	Для каждого элМассива Из ВходящийМассив Цикл
		ИтоговыйМассив.Добавить(элМассива);
	КонецЦикла;
	
	Возврат ИтоговыйМассив;
КонецФункции // КопироватьМассив(Знач ВходящийМассив)


Процедура УстановитьПлагин(Знач ИмяПлагина, ЗагруженныйПлагин)

	ИнформацияОПлагине = ЗагруженныйПлагин.Информация();
	
	РеализованныеМетоды = НайтиРеализованныеМетодыВПлагине(ЗагруженныйПлагин);
	
	Для Каждого ИмяМетода Из РеализованныеМетоды Цикл
		ДелегатПлагина = НовыйДелегатПлагина(ЗагруженныйПлагин, ИмяМетода);
		ПлагиныОбработчики[ИмяМетода].ПодключенныеПлагины.Вставить(ИмяПлагина, ДелегатПлагина);
	КонецЦикла;
	
	ДополнительныеПараметрыПлагинов.Вставить(ИмяПлагина, Новый Структура);
	УстановленныеПлагины.Вставить(ИмяПлагина, ИнформацияОПлагине);
	
КонецПроцедуры

Функция НовыйДелегатПлагина(ОбъектОбработчик, Знач ИмяМетода) Экспорт
	
	Возврат Делегаты.Создать(ОбъектОбработчик, ИмяМетода);

КонецФункции // НовыйДелегатПлагина(ОбъектОбработчик, ИмяМетода) Экспорт

Функция НайтиРеализованныеМетодыВПлагине(Знач Обработчик)

	РеализованныеМетоды = Новый Массив;
	ДоступныеОбработчики = ДоступныеОбработчики();
	
	Для Каждого ТиповойОбработчик Из ДоступныеОбработчики Цикл

		Если Не ПроверитьМетодКласса(Обработчик, ТиповойОбработчик.ИмяПроцедуры, ТиповойОбработчик.КоличествоПараметров) Тогда
			Продолжить;
		КонецЕсли;

		РеализованныеМетоды.Добавить(ТиповойОбработчик.ИмяПроцедуры);

	КонецЦикла;

	Возврат РеализованныеМетоды;
КонецФункции // НайтиРеализованныеМетодыВПлагине()

Процедура ПрисвоитьЗначенияПараметраПроцедуры(НовыеЗначения, 
												Перем0 = Неопределено,
												Перем1 = Неопределено,
												Перем2 = Неопределено,
												Перем3 = Неопределено,
												Перем4 = Неопределено,
												Перем5 = Неопределено,
												Перем6 = Неопределено,
												Перем7 = Неопределено,
												Перем8 = Неопределено,
												Перем9 = Неопределено)
	Количество = НовыеЗначения.Количество();

	Для Индекс = 0 По Количество-1 Цикл

		Если Индекс = 0 Тогда
			Перем0 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 1 Тогда
			Перем1 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 2 Тогда
			Перем2 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 3 Тогда
			Перем3 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 4 Тогда
			Перем4 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 5 Тогда
			Перем5 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 6 Тогда
			Перем6 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 7 Тогда
			Перем7 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 8 Тогда
			Перем8 = НовыеЗначения[Индекс];
		ИначеЕсли Индекс = 9 Тогда
			Перем9 = НовыеЗначения[Индекс];
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры


Функция НовыйОбработчик(Знач ИмяПроцедуры, Знач КоличествоПараметров, Знач ДополнительныеПараметры = Неопределено )

	Возврат Новый ФиксированнаяСтруктура("ИмяПроцедуры, КоличествоПараметров, ДополнительныеПараметры",ИмяПроцедуры, КоличествоПараметров, ДополнительныеПараметры);

КонецФункции // НовыйОбработи()

Функция ДоступныеОбработчики() 

	МассивОбработчиков = новый Массив;
	
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеРегистрацииКомандПриложения", 2)); // 
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриРегистрацииКомандыПриложения", 4)); // 
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриВыполненииКоманды", 3)); // 
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередВыполнениемКоманды", 4)); // 
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеВыполненияКоманды", 4)); // 
	
	
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриАктивизацииПлагина", 2)); // 
	

	МассивОбработчиков.Добавить(НовыйОбработчик("ПередНачаломВыполнения", 5)); // 
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеОкончанияВыполнения", 5));
	
	// Работа с коммитом изменений
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередКоммитом", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриКоммите", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеКоммита", 3));

	// Работа с таблицей версий
	//МассивОбработчиков.Добавить(НовыйОбработчик("ПередПолучениемТаблицыВерсий", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриПолученииТаблицыВерсий", 5));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеПолученияТаблицыВерсий", 4));
	
	
	// Работа с таблицей авторов
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередПолучениемАвторов", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриПолученииАвторов", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеПолученияАвторов", 3));
	
	// Обработка строки версии хранилища
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередНачаломЦиклаОбработкиВерсий", 5));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередОбработкойВерсииХранилища", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриОбработкеВерсииХранилища", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеОбработкиВерсииХранилища", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриОкончанииЦиклаОбработкиВерсий", 3));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеОкончанияЦиклаОбработкиВерсий", 3));
	
	// Работа с выгрузкой в исходники
	МассивОбработчиков.Добавить(НовыйОбработчик("ПередВыполнениемВыгрузки", 6));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПриВыполненииВыгрузки", 7));
	МассивОбработчиков.Добавить(НовыйОбработчик("ПослеВыполненияВыгрузки", 6));
	
	Возврат Новый ФиксированныйМассив(МассивОбработчиков);
	
КонецФункции // ДоступныеОбработчики() Экспорт

Функция ПроверитьМетодКласса(Знач КлассРеализацииКоманды,
							Знач ИмяМетода,
							Знач ТребуемоеКоличествоПараметров = 0,
							Знач ЭтоФункция = Ложь)

	ЕстьМетод = РефлекторПроверкиКоманд.МетодСуществует(КлассРеализацииКоманды, ИмяМетода);

	Если Не ЕстьМетод Тогда
		Возврат Ложь;
	КонецЕсли;

	ТаблицаМетодов = ПолучитьТаблицуМетодов(КлассРеализацииКоманды);
	СтрокаМетода = ТаблицаМетодов.Найти(ИмяМетода, "Имя");
	Если СтрокаМетода = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	ПроверкаНаФункцию = ЭтоФункция = СтрокаМетода.ЭтоФункция;
	ПроверкаНаКоличествоПараметров = ТребуемоеКоличествоПараметров = СтрокаМетода.КоличествоПараметров;

	//Сообщить(СтрШаблон("Класс %1 метод %2: %3", КлассРеализацииКоманды, ИмяМетода, ПроверкаНаФункцию 
	//		И ПроверкаНаКоличествоПараметров ));

	Возврат ПроверкаНаФункцию 
			И ПроверкаНаКоличествоПараметров;


КонецФункции // ПроверитьМетодУКласса()

Функция ПолучитьТаблицуМетодов(Знач КлассРеализацииКоманды)

	Возврат РефлекторПроверкиКоманд.ПолучитьТаблицуМетодов(КлассРеализацииКоманды);

КонецФункции

Процедура Инициализация()
		
	ПараметрыКоманды = Новый Массив;
	РефлекторПроверкиКоманд = Новый Рефлектор;
	СтандартнаяОбработка = Истина;
	Отказ = ложь;
	ИнициализацияПлагиныОбработчики();
	ДополнительныеПараметрыПлагинов = Новый Соответствие;
	МассивЗагруженныхПлагинов = Новый Массив;
	УстановленныеПлагины = Новый Соответствие;
	
		
	ИмяМетода_ПриРегистрацииКомандПриложения = "ПриРегистрацииКомандПриложения";

КонецПроцедуры

Процедура ИнициализацияПлагиныОбработчики()

	ПлагиныОбработчики = Новый Соответствие;
	ДоступныеОбработчики = ДоступныеОбработчики();
	Для Каждого ТиповойОбработчик Из ДоступныеОбработчики Цикл

		ПлагиныОбработчики.Вставить(ТиповойОбработчик.ИмяПроцедуры, Новый Структура("Настройка, ПодключенныеПлагины", ТиповойОбработчик, Новый Соответствие));

	КонецЦикла;
	
КонецПроцедуры
	
Инициализация();

Лог = Логирование.ПолучитьЛог("oscript.app.gitsync.plugins");